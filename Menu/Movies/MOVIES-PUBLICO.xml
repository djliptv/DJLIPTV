<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<item>
	<title>[COLOR white][B]+[/B][/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey]PACK 1[/COLOR]</title>
	<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail>
	<fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
	<link>http://ignoreme</link>
	<externallink>http://srregio.xyz/IPTV/regioflix.m3u</externallink>
</item>

<item>
	<title>[COLOR white][B]+[/B][/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey]PACK 2[/COLOR]</title>
	<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail>
	<fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
	<link>http://ignoreme</link>
	<externallink>http://tecnotv.club/peliculas.m3u</externallink>
</item>

<item>
	<title>[COLOR white][B]+[/B][/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey]PACK 3[/COLOR]</title>
	<link>http://ignorame</link>
	<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail>
	<fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
	<externallink>http://tvpremiumhd.club/hd/peliculas.m3u</externallink>
</item>


<item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][Cinecalidad Latino][/COLOR]</title>
<link>$doregex[makelist0]</link>
<regex>
    <name>makelist0</name> movies  (all pages)
 <listrepeat><![CDATA[
   <title>[makelist0.param3] </title>
   <link>$doregex[makelist]</link>
   <thumbnail>[makelist0.param2]</thumbnail>
<fanart>[makelist0.param2]</fanart>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'https://www.cinecalidad.to/'     ### usually, ~ 'http://website.com/category/' ### 
 categorylink = '' ### check the number of the param ###
 centerurl = 'page/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'post_box.*?href=([^>]+).*?src=(.*?jpg).*?alt="([^"]+).*?title="([^"]+)'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 200 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>

<regex>
<name>makelist</name>
<listrepeat><![CDATA[
   <title>[makelist0.param3]   server:[makelist.param1]</title>
  <urlsolve>[makelist.param2]</urlsolve>
   <thumbnail>[makelist0.param2]</thumbnail>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
  import re
  def dec(strdata):
    d=''
    strdata=strdata.split(' ')
    for strchar in strdata:
        d += chr(int(strchar)-2)
    return d

  embeds = {'OnlineUpToBox' : 'https://uptobox.com/%s',
            'OnlineYourUpload' : 'https://www.yourupload.com/watch/%s',
            'TheVideoMe' : 'https://thevideo.me/embed-%s.html',
            'OnlineFilesCDN' : 'https://filescdn.com/%s',
            'OnlineGD' : '/protect/gdredirect.php?l=%s',
            'OnlineUsersCloud' : 'https://userscloud.com/%s',
            'OnlineUsersFiles' : 'https://usersfiles.com/%s',
            'OnlineOkRu' : 'https://ok.ru/video/%s',
            'OnlineOpenload' : 'https://openload.co/f/%s',
			'OnlineVidoza' : 'https://vidoza.net/%s',
			'OnlineClipwatching' : 'https://clipwatching.com/%s',
            'OnlineStreamango' : 'https://streamango.com/f/%s',
            'OnlineRapidVideo' : 'https://www.rapidvideo.com/v/%s',
            'OnlineMega': 'https://mega.nz/#!%s',
			'OnlineVidcloud' : 'https://vidcloud.co/v/%s',
			'OnlineGounlimited' : 'https://gounlimited.to/%s',
			'OnlineVerystream' : 'https://verystream.com/stream/%s',
			'OnlineNetu' : 'https://netu.tv/watch_video.php?v=%s',
			'OnlineFembed': 'https://www.fembeder.com/f/%s',
            'Trailer' : 'https://www.youtube.com/watch?v=%s'}
  srcs = []
  items = re.findall('class=\"link\sonlinelink\"\sservice=(.*?)\sdata="(.*?)"',page_data)
  for embed,sdata in items:
    srcs.append((embed.replace('Online',''), embeds[embed]%dec(sdata)))
  return srcs
]]></expres>
<page>[makelist0.param1]</page>
</regex>
 
<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail>
<fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
</item>



<item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS ESTRENOS[/COLOR] [COLOR grey][CineVall Latino][/COLOR]</title>

<link>$doregex[makelist3]</link>

<regex>
    <name>makelist3</name> movies  (all pages)
 <listrepeat><![CDATA[
<title>[makelist3.param3]</title>
 <link>$doregex[finalURL]|Referer=http://www.cinevall.website&amp;User-Agent=Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0</link>
<thumbnail>[makelist3.param2]</thumbnail>
 <regex>
<name>finalURL</name>
<expres>file: "(.*?)\"</expres>
<page>[makelist3.param1]</page>
<referer>http://www.cinevall.website/movies/</referer>
<agent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</agent>
</regex>
 </item>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'http://www.grupovalltv.net/peliculas/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'page/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'poster[\w\W\s]{0,15}href="(.*?)".*?src="(.*?)".*?lt="(.*?)"'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 1 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage = firstpage + 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>

<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail>
<fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
 </item>

<item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][CineVall Latino][/COLOR]</title>

<link>$doregex[makelist3]</link>

<regex>
    <name>makelist3</name> movies  (all pages)
 <listrepeat><![CDATA[
<title>[makelist3.param3]</title>
 <link>$doregex[finalURL]|Referer=http://www.cinevall.website&amp;User-Agent=Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0</link>
<thumbnail>[makelist3.param2]</thumbnail>
 <regex>
<name>finalURL</name>
<expres>file: "(.*?)\"</expres>
<page>[makelist3.param1]</page>
<referer>http://www.cinevall.website/movies/</referer>
<agent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</agent>
</regex>
 </item>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'http://www.grupovalltv.net/peliculas/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'page/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'poster[\w\W\s]{0,15}href="(.*?)".*?src="(.*?)".*?lt="(.*?)"'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 12 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage = firstpage + 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>

<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail>
<fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
 </item>

 <item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][SoloCastellano][/COLOR]</title>
 <link>$doregex[makelist2]</link>

 <regex>
    <name>makelist2</name> movies  (all pages)
 <listrepeat><![CDATA[
<title> [makelist2.param3]  ([makelist2.param4])  </title>
 <link>$doregex[oload]</link>
 <thumbnail>[makelist2.param1]</thumbnail>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'http://www.solocastellano.com/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'lista-de-peliculas/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'movie".*?\n.*?imagen.*?\n.*?src="(.*?)".*?\n.*?href=\'(.*?)\'.*?\n.*?h2>(.*?)<.*?\n.*?year">(.*?)<'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 10 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres>
<expres><![CDATA[]]></expres>
<page></page>
</regex>
 
<regex>
<name>oload</name>
<expres><![CDATA[#$pyFunction:
def GetLSProData(page_data,Cookie_Jar,m):


   import cookielib
   import re
   import urllib
   import urllib2

   def read(url):
       opener = urllib2.build_opener()
       opener.addheaders = [('User-Agent', 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36')]
       response = opener.open(url)
       data = response.read()
       return data

   def read_openload(url):
       default_headers = dict()
       default_headers["User-Agent"] = "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36"
       default_headers["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
       default_headers["Accept-Language"] = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3"
       default_headers["Accept-Charset"] = "UTF-8"
       default_headers["Accept-Encoding"] = "gzip"
       cj = cookielib.MozillaCookieJar()
       request_headers = default_headers.copy()
       url = urllib.quote(url, safe="%/:=&?~#+!$,;'@()*[]")
       handlers = [urllib2.HTTPHandler(debuglevel=False)]
       handlers.append(NoRedirectHandler())
       handlers.append(urllib2.HTTPCookieProcessor(cj))
       opener = urllib2.build_opener(*handlers)
       req = urllib2.Request(url, None, request_headers)
       handle = opener.open(req, timeout=None)

       return handle.headers.dict.get('location')

   def decode(code, parseInt, _0x59ce16, _1x4bfb36):
       import math

       _0x1bf6e5 = ''
       ke = []

       for i in range(0, len(code[0:9*8]),8):
           ke.append(int(code[i:i+8],16))

       _0x439a49 = 0
       _0x145894 = 0

       while _0x439a49 < len(code[9*8:]):
           _0x5eb93a = 64
           _0x896767 = 0
           _0x1a873b = 0
           _0x3c9d8e = 0
           while True:
               if _0x439a49 + 1 >= len(code[9*8:]):
                   _0x5eb93a = 143;

               _0x3c9d8e = int(code[9*8+_0x439a49:9*8+_0x439a49+2], 16)
               _0x439a49 +=2

               if _0x1a873b < 6*5:
                   _0x332549 = _0x3c9d8e & 63
                   _0x896767 += _0x332549 << _0x1a873b
               else:
                   _0x332549 = _0x3c9d8e & 63
                   _0x896767 += int(_0x332549 * math.pow(2, _0x1a873b))

               _0x1a873b += 6
               if not _0x3c9d8e >= _0x5eb93a: break

           # _0x30725e = _0x896767 ^ ke[_0x145894 % 9] ^ _0x59ce16 ^ parseInt ^ _1x4bfb36
           _0x30725e = _0x896767 ^ ke[_0x145894 % 9] ^ parseInt ^ _1x4bfb36
           _0x2de433 = _0x5eb93a * 2 + 127

           for i in range(4):
               _0x3fa834 = chr(((_0x30725e & _0x2de433) >> (9*8/ 9)* i) - 1)
               if _0x3fa834 != '$':
                   _0x1bf6e5 += _0x3fa834
               _0x2de433 = (_0x2de433 << (9*8/ 9))

           _0x145894 += 1


       url = "https://openload.co/stream/%s?mime=true" % _0x1bf6e5
       return url

   class NoRedirectHandler(urllib2.HTTPRedirectHandler):
       def http_error_302(self, req, fp, code, msg, headers):
           infourl = urllib.addinfourl(fp, headers, req.get_full_url())
           infourl.status = code
           infourl.code = code
           return infourl

       http_error_300 = http_error_302
       http_error_301 = http_error_302
       http_error_303 = http_error_302
       http_error_307 = http_error_302

   url = 'https://openload.co$doregex[link]'
   data = read(url)
   try:
       try:
           code = re.findall('p style="" id="[^"]+">(.*?)<\/p', data, flags=re.DOTALL)[0]
       except:
           code = re.findall('<p id=\".*?\" style=\"\">(.*?)<\/p', data, flags=re.DOTALL)[0]
       _0x59ce16 = eval(re.findall('_0x59ce16=([^;]+)',data)[0].replace('parseInt', 'int'))
       _1x4bfb36 = eval(re.findall('_1x4bfb36=([^;]+)',data)[0].replace('parseInt', 'int'))
       parseInt  = eval(re.findall('_0x30725e,(\(parseInt.*?)\),',data)[0].replace('parseInt', 'int'))
       url = decode(code, parseInt, _0x59ce16, _1x4bfb36)
       url = read_openload(url)
   except:
       pass
       return ''
       
   header_test = {'user-agent': 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36'}
   header_test = '|' + urllib.urlencode(header_test)
   return url + header_test
]]></expres>        
<page></page>
</regex>

<regex>
<name>link</name>
<expres>$pyFunction:'$doregex[link2]'.replace("%2F", "/")</expres>
<page></page>
</regex>
<regex>
<name>link2</name>
<expres>openload.co(.*?)"</expres>
<page>$doregex[makelist]</page>
</regex>
<regex>
<name>makelist</name>
<expres>href="(http.*?aHR0cHM6Ly9vcGVubG9hZC5jby9m.*?)"</expres>
<page>http://www.solocastellano.com/[makelist2.param2]</page>
</regex>
<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>

 </item>
 
  <item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][EstaDePelis Latino][/COLOR]</title>
 <link>$doregex[makelist2]</link>

 <regex>
    <name>makelist2</name> movies  (all pages)
 <listrepeat><![CDATA[
<title> [makelist2.param3]  ([makelist2.param4])  </title>
 <link>$doregex[oload]</link>
 <thumbnail>[makelist2.param1]</thumbnail>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'http://www.estadepelis.net/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'lista-de-peliculas/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'movie".*?\n.*?imagen.*?\n.*?src="(.*?)".*?\n.*?href=\'(.*?)\'.*?\n.*?h2>(.*?)<.*?\n.*?year">(.*?)<'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 10 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres>
<expres><![CDATA[]]></expres>
<page></page>
</regex>
 
<regex>
<name>oload</name>
<expres><![CDATA[#$pyFunction:
def GetLSProData(page_data,Cookie_Jar,m):


   import cookielib
   import re
   import urllib
   import urllib2

   def read(url):
       opener = urllib2.build_opener()
       opener.addheaders = [('User-Agent', 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36')]
       response = opener.open(url)
       data = response.read()
       return data

   def read_openload(url):
       default_headers = dict()
       default_headers["User-Agent"] = "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36"
       default_headers["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
       default_headers["Accept-Language"] = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3"
       default_headers["Accept-Charset"] = "UTF-8"
       default_headers["Accept-Encoding"] = "gzip"
       cj = cookielib.MozillaCookieJar()
       request_headers = default_headers.copy()
       url = urllib.quote(url, safe="%/:=&?~#+!$,;'@()*[]")
       handlers = [urllib2.HTTPHandler(debuglevel=False)]
       handlers.append(NoRedirectHandler())
       handlers.append(urllib2.HTTPCookieProcessor(cj))
       opener = urllib2.build_opener(*handlers)
       req = urllib2.Request(url, None, request_headers)
       handle = opener.open(req, timeout=None)

       return handle.headers.dict.get('location')

   def decode(code, parseInt, _0x59ce16, _1x4bfb36):
       import math

       _0x1bf6e5 = ''
       ke = []

       for i in range(0, len(code[0:9*8]),8):
           ke.append(int(code[i:i+8],16))

       _0x439a49 = 0
       _0x145894 = 0

       while _0x439a49 < len(code[9*8:]):
           _0x5eb93a = 64
           _0x896767 = 0
           _0x1a873b = 0
           _0x3c9d8e = 0
           while True:
               if _0x439a49 + 1 >= len(code[9*8:]):
                   _0x5eb93a = 143;

               _0x3c9d8e = int(code[9*8+_0x439a49:9*8+_0x439a49+2], 16)
               _0x439a49 +=2

               if _0x1a873b < 6*5:
                   _0x332549 = _0x3c9d8e & 63
                   _0x896767 += _0x332549 << _0x1a873b
               else:
                   _0x332549 = _0x3c9d8e & 63
                   _0x896767 += int(_0x332549 * math.pow(2, _0x1a873b))

               _0x1a873b += 6
               if not _0x3c9d8e >= _0x5eb93a: break

           # _0x30725e = _0x896767 ^ ke[_0x145894 % 9] ^ _0x59ce16 ^ parseInt ^ _1x4bfb36
           _0x30725e = _0x896767 ^ ke[_0x145894 % 9] ^ parseInt ^ _1x4bfb36
           _0x2de433 = _0x5eb93a * 2 + 127

           for i in range(4):
               _0x3fa834 = chr(((_0x30725e & _0x2de433) >> (9*8/ 9)* i) - 1)
               if _0x3fa834 != '$':
                   _0x1bf6e5 += _0x3fa834
               _0x2de433 = (_0x2de433 << (9*8/ 9))

           _0x145894 += 1


       url = "https://openload.co/stream/%s?mime=true" % _0x1bf6e5
       return url

   class NoRedirectHandler(urllib2.HTTPRedirectHandler):
       def http_error_302(self, req, fp, code, msg, headers):
           infourl = urllib.addinfourl(fp, headers, req.get_full_url())
           infourl.status = code
           infourl.code = code
           return infourl

       http_error_300 = http_error_302
       http_error_301 = http_error_302
       http_error_303 = http_error_302
       http_error_307 = http_error_302

   url = 'https://openload.co$doregex[link]'
   data = read(url)
   try:
       try:
           code = re.findall('p style="" id="[^"]+">(.*?)<\/p', data, flags=re.DOTALL)[0]
       except:
           code = re.findall('<p id=\".*?\" style=\"\">(.*?)<\/p', data, flags=re.DOTALL)[0]
       _0x59ce16 = eval(re.findall('_0x59ce16=([^;]+)',data)[0].replace('parseInt', 'int'))
       _1x4bfb36 = eval(re.findall('_1x4bfb36=([^;]+)',data)[0].replace('parseInt', 'int'))
       parseInt  = eval(re.findall('_0x30725e,(\(parseInt.*?)\),',data)[0].replace('parseInt', 'int'))
       url = decode(code, parseInt, _0x59ce16, _1x4bfb36)
       url = read_openload(url)
   except:
       pass
       return ''
       
   header_test = {'user-agent': 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36'}
   header_test = '|' + urllib.urlencode(header_test)
   return url + header_test
]]></expres>        
<page></page>
</regex>

<regex>
<name>link</name>
<expres>$pyFunction:'$doregex[link2]'.replace("%2F", "/")</expres>
<page></page>
</regex>
<regex>
<name>link2</name>
<expres>openload.co(.*?)"</expres>
<page>$doregex[makelist]</page>
</regex>
<regex>
<name>makelist</name>
<expres>href="(http.*?aHR0cHM6Ly9vcGVubG9hZC5jby9m.*?)"</expres>
<page>http://www.estadepelis.net/[makelist2.param2]</page>
</regex>
<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>

 </item>
 
 
  <item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][PelisGratis Latino - Castellano][/COLOR]</title>

<link>$doregex[makelist2]</link>



<regex>
    <name>makelist2</name> movies  (all pages)
 <listrepeat><![CDATA[
<title>[makelist2.param3] ([makelist2.param4])</title>
<link>$doregex[makelist]</link>
<thumbnail>https:[makelist2.param2]</thumbnail>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'https://pelisgratis.me/estrenos/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'page/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'C">.*?\n.*?href="(.*?)".*?\n.*?\n.*?src="(.*?)".*?\n.*?\n.*?Title">(.*?)<.*?Year">(.*?)<'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 9 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>



<regex>
<name>makelist</name>
<listrepeat><![CDATA[
<title>[B][makelist2.param3][/B] ([makelist2.param4])   Servidor:[makelist.param2]</title>
<link>$doregex[id3]</link>
<thumbnail>https:[makelist2.param2]</thumbnail>
]]></listrepeat>
<expres><![CDATA[embed="(.*?)">(.*?)<]]></expres>
<page>$doregex[idioma]</page>
<referer>https://pelisgratis.me/</referer>
</regex>

<regex>
<name>idioma</name>
<expres>$doregex[select]</expres>
<page>[makelist2.param1]</page>
</regex>

<regex>
<name>select</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
  import xbmcgui
  dialog = xbmcgui.Dialog()
  ret = dialog.select('Elige un idioma ', ['Latino', 'Castellano'])
  lists = ['src="(https\:\/\/repro.*?)"', 't\;(https\:\/\/repro.*?)\&']
  return lists[ret]
]]></expres>
 <page></page>
 </regex>
 

<regex>
<name>id3</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
   import urlresolver, resolveurl
   url = '$doregex[link]'
   try:
     u = urlresolver.resolve(url)
   except:
     u = resolveurl.resolve(url)
   return u
]]></expres>
<page></page>
</regex>
 
 
<regex>
<name>link</name>
<expres>$pyFunction:base64.b64decode('[makelist.param1]')</expres>
<page></page>
</regex>
  
 <thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
 </item>
 
 
 
 
 
 



 
 


 <item>
 <title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][Descargas 2020 Latino - Castellano][/COLOR]</title>

 <link>$doregex[makelist2]</link>


  <regex>
 <name>makelist2</name>
 <listrepeat><![CDATA[
 <title> [makelist2.param2]  </title>
 <link>$doregex[makelist3]</link>
 <thumbnail>https:[makelist2.param3]</thumbnail>
 <fanart>https:[makelist2.param3]</fanart>
]]></listrepeat>
 <expres>href="(.*?)".*?Descargar(.*?)gratis[\w\W\s]{0,13}src="(.*?)"</expres>
 <page>$doregex[select]</page>
 </regex>
 
 

<regex>
<name>select</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
  import xbmcgui
  dialog = xbmcgui.Dialog()
  ret = dialog.select('Elige una Seccion ', ['Peliculas Castellano', 'Peliculas Latino', 'Estrenos de Cine Castellano', 'Peliculas Alta Definicion HD', 'Peliculas en 3D HD', 'Otras Peliculas', 'Peliculas x264 MKV', 'Peliculas V.O.Subtituladas'])
  lists = ['http://descargas2020.com/peliculas/', 'http://descargas2020.com/peliculas-latino/', 'http://descargas2020.com/estrenos-de-cine/', 'http://descargas2020.com/peliculas-hd/', 'http://descargas2020.com/peliculas-3d/', 'http://descargas2020.com/otras-peliculas/', 'http://descargas2020.com/peliculas-x264-mkv/']
  return lists[ret]
]]></expres>
 <page></page>
 </regex>


  <regex>
 <name>makelist3</name>
 <listrepeat><![CDATA[
 <title> [makelist2.param2] server:[makelist3.param1]</title>
<link>$doregex[id3]</link>
 <thumbnail>https:[makelist2.param3]</thumbnail>
 <fanart>https:[makelist2.param3]</fanart>
 ]]></listrepeat>
 <expres><![CDATA[href='(https://openload.*?|https://powvideo.*?|https://uptobox.*?|https://vidabc.*?|http://uptobox.*?|https://clip.*?|https://vidoza.*?)']]></expres>
 <page>[makelist2.param1]</page>
 </regex>

<regex>
<name>id3</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
    import urlresolver, resolveurl
    url = '[makelist3.param1]'
    try:
        u = urlresolver.resolve(url)
    except:
        u = resolveurl.resolve(url)
    return u
]]></expres>
<page></page>
</regex>

 <thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
 </item>




<item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][MiraDeTodo][/COLOR]</title>
<link>$doregex[makelist1]</link>

<regex>
    <name>makelist1</name> movies  (all pages)
 <listrepeat><![CDATA[
 <title> [makelist1.param3]   </title>
<link>$doregex[makelist0]</link>
 <thumbnail>[makelist1.param2]</thumbnail>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'https://miradetodo.net/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'page/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/?s=' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'class="item".*?\n.*?href="(.*?)".*?\n.*?\n.*?src="(.*?)".*?alt="(.*?)"'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 6 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>


<regex>
<name>makelist0</name>
<listrepeat><![CDATA[
<title>[makelist1.param3]  opcion:[makelist0.param1]    </title>
<link>$doregex[makelist3]</link>
 <thumbnail>[makelist1.param2]</thumbnail>
]]></listrepeat>
<expres><![CDATA[class="(movie.*?)".*?iframe.*?data-lazy-src="(.*?)"]]></expres>
<page>[makelist1.param1]</page>
</regex>

<regex>
<name>makelist3</name>
<listrepeat><![CDATA[
<title>[makelist1.param3]  - Server:[makelist3.param2] </title>
<link>$doregex[id3]</link>
 <thumbnail>[makelist1.param2]</thumbnail>
]]></listrepeat>
<expres><![CDATA[a\shref="(.*?)".*?\n.*?\n.*?\n.*?\n.*?span>(.*?)<]]></expres>
<page>[makelist0.param2]</page>
</regex>

								

<regex>
<name>id3</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
    import urlresolver, resolveurl
    url = '$doregex[serv]'
    try:
        u = urlresolver.resolve(url)
    except:
        u = resolveurl.resolve(url)
    return u
]]></expres>
<page></page>
</regex>

<regex>
<name>serv</name>
<expres><![CDATA[iframe src="(.*?)"]]></expres>
<page>[makelist3.param1]</page>
</regex>
<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
</item>

 

 
 
 
 
<item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][MiraPeliculas][/COLOR]</title>
<link>$doregex[makelist1]</link>

<regex>
    <name>makelist1</name> movies  (all pages)
 <listrepeat><![CDATA[
 <title> [makelist1.param3]   </title>
<link>$doregex[oload]</link>
 <thumbnail>[makelist1.param2]</thumbnail>

]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'https://miradetodo.net/'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'page/'      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/?s=' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = 'class="item".*?\n.*?href="(.*?)".*?\n.*?\n.*?src="(.*?)".*?alt="(.*?)"'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 6 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>






<regex>
<name>oload</name>
<expres><![CDATA[#$pyFunction:
def GetLSProData(page_data,Cookie_Jar,m):


   import cookielib
   import re
   import urllib
   import urllib2

   def read(url):
       opener = urllib2.build_opener()
       opener.addheaders = [('User-Agent', 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36')]
       response = opener.open(url)
       data = response.read()
       return data

   def read_openload(url):
       default_headers = dict()
       default_headers["User-Agent"] = "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36"
       default_headers["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
       default_headers["Accept-Language"] = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3"
       default_headers["Accept-Charset"] = "UTF-8"
       default_headers["Accept-Encoding"] = "gzip"
       cj = cookielib.MozillaCookieJar()
       request_headers = default_headers.copy()
       url = urllib.quote(url, safe="%/:=&?~#+!$,;'@()*[]")
       handlers = [urllib2.HTTPHandler(debuglevel=False)]
       handlers.append(NoRedirectHandler())
       handlers.append(urllib2.HTTPCookieProcessor(cj))
       opener = urllib2.build_opener(*handlers)
       req = urllib2.Request(url, None, request_headers)
       handle = opener.open(req, timeout=None)

       return handle.headers.dict.get('location')

   def decode(code, parseInt, _0x59ce16, _1x4bfb36):
       import math

       _0x1bf6e5 = ''
       ke = []

       for i in range(0, len(code[0:9*8]),8):
           ke.append(int(code[i:i+8],16))

       _0x439a49 = 0
       _0x145894 = 0

       while _0x439a49 < len(code[9*8:]):
           _0x5eb93a = 64
           _0x896767 = 0
           _0x1a873b = 0
           _0x3c9d8e = 0
           while True:
               if _0x439a49 + 1 >= len(code[9*8:]):
                   _0x5eb93a = 143;

               _0x3c9d8e = int(code[9*8+_0x439a49:9*8+_0x439a49+2], 16)
               _0x439a49 +=2

               if _0x1a873b < 6*5:
                   _0x332549 = _0x3c9d8e & 63
                   _0x896767 += _0x332549 << _0x1a873b
               else:
                   _0x332549 = _0x3c9d8e & 63
                   _0x896767 += int(_0x332549 * math.pow(2, _0x1a873b))

               _0x1a873b += 6
               if not _0x3c9d8e >= _0x5eb93a: break

           # _0x30725e = _0x896767 ^ ke[_0x145894 % 9] ^ _0x59ce16 ^ parseInt ^ _1x4bfb36
           _0x30725e = _0x896767 ^ ke[_0x145894 % 9] ^ parseInt ^ _1x4bfb36
           _0x2de433 = _0x5eb93a * 2 + 127

           for i in range(4):
               _0x3fa834 = chr(((_0x30725e & _0x2de433) >> (9*8/ 9)* i) - 1)
               if _0x3fa834 != '$':
                   _0x1bf6e5 += _0x3fa834
               _0x2de433 = (_0x2de433 << (9*8/ 9))

           _0x145894 += 1


       url = "https://openload.co/stream/%s?mime=true" % _0x1bf6e5
       return url

   class NoRedirectHandler(urllib2.HTTPRedirectHandler):
       def http_error_302(self, req, fp, code, msg, headers):
           infourl = urllib.addinfourl(fp, headers, req.get_full_url())
           infourl.status = code
           infourl.code = code
           return infourl

       http_error_300 = http_error_302
       http_error_301 = http_error_302
       http_error_303 = http_error_302
       http_error_307 = http_error_302

   url = '$doregex[openload]'
   data = read(url)
   try:
       try:
           code = re.findall('p style="" id="[^"]+">(.*?)<\/p', data, flags=re.DOTALL)[0]
       except:
           code = re.findall('<p id=\".*?\" style=\"\">(.*?)<\/p', data, flags=re.DOTALL)[0]
       _0x59ce16 = eval(re.findall('_0x59ce16=([^;]+)',data)[0].replace('parseInt', 'int'))
       _1x4bfb36 = eval(re.findall('_1x4bfb36=([^;]+)',data)[0].replace('parseInt', 'int'))
       parseInt  = eval(re.findall('_0x30725e,(\(parseInt.*?)\),',data)[0].replace('parseInt', 'int'))
       url = decode(code, parseInt, _0x59ce16, _1x4bfb36)
       url = read_openload(url)
   except:
       pass
       return ''
       
   header_test = {'user-agent': 'Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3163.100 Safari/537.36'}
   header_test = '|' + urllib.urlencode(header_test)
   return url + header_test
]]></expres>        
<page></page>
</regex>

<regex>
<name>openload</name>
<expres><![CDATA[iframe\ssrc="(.*?)"]]></expres>
<page>$doregex[server]</page>
</regex>
<regex>
<name>server</name>
<expres><![CDATA[nav">.*?\n.*?\n.*?\n.*?href="(.*?)"]]></expres>
<page>$doregex[serv]</page>
</regex>
<regex>
<name>serv</name>
<expres><![CDATA[href="(.*?)".*?\n.*?\n.*?\n.*?\n.*?Openload]]></expres>
<page>$doregex[makelist0]</page>
</regex>
<regex>
<name>makelist0</name>
<expres><![CDATA[data-lazy-src="(http.*?)"]]></expres>
<page>[makelist1.param1]</page>
</regex>


								
								

<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
</item>





 <item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][AllPeliculas Estrenos][/COLOR]</title>
<link>$doregex[makelist3]</link>
<regex>
    <name>makelist3</name> movies  (all pages)
 <listrepeat><![CDATA[
<title>[makelist3.param1] ([makelist3.param1]) </title>
<link>$doregex[makelist2]</link>
<thumbnail>http://allpeliculas.io/source/movies/poster/[makelist3.param4]/thumbs/poster-1.jpg</thumbnail>
]]></listrepeat>
<expres><![CDATA[#$pyFunction
import re, requests
def GetLSProData(page_data,Cookie_Jar,m):

################################################################## FORMULARY #################################################################
 starturl = 'http://allpeliculas.io/movies/newmovies?'     ### usually, ~ 'http://website.com/category/' ###
 categorylink = '' ### check the number of the param ###
 centerurl = 'page='      ### something like  '/page/' ###
 firstpage = 1 ### probably  = 1 ###
 endurl = '/' ### can be empty ###    ### endurl without final / (SLASH) ###
#
 dataregex = '\"title\"\:\"(.*?)\".*?origin_name\"\:\"(.*?)\".*?slug\"\:\"(.*?)\".*?img_dir\"\:\"(tt.*?)\"'      ### To adapt ###
 headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0', 'Referer': ''}      ### To adapt ###
##############################################################################################################################################

############################## GENERIC PART #####################################
 fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
 source = requests.get(fullurl, headers= headers).text #
 data = [] #
#
 last = 6 #
 while firstpage <= last: #
    try: #
        fullurl = starturl + centerurl + str(firstpage) + endurl + categorylink #
        source = requests.get(fullurl, headers=headers).text #
        data += re.findall(dataregex, source) #
        firstpage += 1 #
    except: #
        pass #
 return data #

]]></expres><page></page>
</regex>



<regex>
<name>makelist2</name>
<listrepeat><![CDATA[
<title>[B][makelist3.param1][/B] [makelist2.param2]</title>
<link>$doregex[id3]</link>
<thumbnail>http://allpeliculas.io/source/movies/poster/[makelist3.param4]/thumbs/poster-1.jpg</thumbnail>
]]></listrepeat>
<expres><![CDATA[data-link="(.*?)">(.*?)<]]></expres>
<page>http://allpeliculas.io/pelicula/[makelist3.param3]</page>
</regex>


<regex>
<name>id3</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
    import urlresolver, resolveurl
    url = '[makelist2.param1]'
    try:
        u = urlresolver.resolve(url)
    except:
        u = resolveurl.resolve(url)
    return u
]]></expres>
<page></page>
</regex>
 
<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
</item>


  

  
  
 


 <item>
<title>[COLOR white]+[/COLOR] [COLOR gray]PELICULAS[/COLOR] [COLOR grey][AllPeliculas Nuevas][/COLOR]</title>
<link>$doregex[makelist3]</link>

<regex>
<name>makelist3</name>
<listrepeat><![CDATA[
<title>[makelist3.param1] ([makelist3.param1]) </title>
<link>$doregex[makelist2]</link>
<thumbnail>http://allpeliculas.com/source/movies/poster/[makelist3.param4]/thumbs/poster-1.jpg</thumbnail>
]]></listrepeat>
<expres><![CDATA[\"title\"\:\"(.*?)\".*?origin_name\"\:\"(.*?)\".*?slug\"\:\"(.*?)\".*?img_dir\"\:\"(tt.*?)\"]]></expres>
<page>http://allpeliculas.com/movies/newmovies?page=$doregex[select]</page>
</regex>



<regex>
<name>select</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
  import xbmcgui
  dialog = xbmcgui.Dialog()
  ret = dialog.select('Elige una pagina ', ['Pagina 1', 'Pagina 2', 'Pagina 3', 'Pagina 4', 'Pagina 5', 'Pagina 6', 'Pagina 7', 'Pagina 8', 'Pagina 9', 'Pagina 10'])
  lists = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
  return lists[ret]
]]></expres>
 <page></page>
 </regex>



<regex>
<name>makelist2</name>
<listrepeat><![CDATA[
<title>[B][makelist3.param1][/B] - [makelist2.param2]</title>
<link>$doregex[id3]</link>
<thumbnail>http://allpeliculas.com/source/movies/poster/[makelist3.param4]/thumbs/poster-1.jpg</thumbnail>
]]></listrepeat>
<expres><![CDATA[data-link="(.*?)">(.*?)<]]></expres>
<page>http://allpeliculas.com/pelicula/[makelist3.param3]</page>
</regex>



<regex>
<name>id3</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data,Cookie_Jar,m):
    import urlresolver, resolveurl
    url = '[makelist2.param1]'
    try:
        u = urlresolver.resolve(url)
    except:
        u = resolveurl.resolve(url)
    return u
]]></expres>
<page></page>
</regex>
 
<thumbnail>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesThumbnail.jpg?raw=true</thumbnail><fanart>https://github.com/djliptv/DJLIPTV/blob/master/Pics/Logos/MoviesFanart.jpg?raw=true</fanart>
</item>